#type Never:

#type Unit()

#type Bool:
  false()
  true()

#type Maybe[T]:
  none()
  some(value T)

#type List[T]:
  empty()
  link(head T, tail List[T])

#type Pair[K, V](key K, value V)

# Placeholder types for testing
#type Int:
#type Float:
#type String:
#type Array[T]:
#type Block0[R]:
#type Block1[A1, R]:
#type Block2[A1, A2, R]:

#method size[T](array Array[T]) Int:
#method at[T](array Array[T], index Int) Maybe[T]:
#method pry[T](array Array[T], index Int) T:
#method pryHead[T](array Array[T]) T:
#method pryTail[T](array Array[T]) Array[T]:
#method head[T](array Array[T]) Maybe[T]:
#method tail[T](array Array[T]) Maybe[Array[T]]:

#method pry[T](maybe Maybe[T]) T:

#method +(left Int, right Int) Int:
#method -(left Int, right Int) Int:
#method <(left Int, right Int) Int:

#method call[R](block Block0[R]) R:
#method call[A1, R](block Block1[A1, R], argument1 A1) R:
#method call[A1, A2, R](block Block2[A1, A2, R], argument1 A1, argument2 A2) R:

#method if[T](condition Bool, body Block0[T]) Maybe[T]:
#method else[T](maybe Maybe[T], body Block0[T]) T:
